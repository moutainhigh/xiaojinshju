package fengkongweishi.config;

import fengkongweishi.filter.MobileAuthenticationFilter;
import fengkongweishi.service.UserService;
import fengkongweishi.util.MD5Util;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.session.SessionRegistry;
import org.springframework.security.core.session.SessionRegistryImpl;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.annotation.EnableTransactionManagement;

/**
 * @author huanghengkun
 * @date 2018/1/8
 */
@Configuration
@EnableWebSecurity
@EnableTransactionManagement
@EnableGlobalMethodSecurity(prePostEnabled = true, proxyTargetClass = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {


    private Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 主过滤器
     *
     * @param http
     * @throws Exception
     */
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
        http.headers().frameOptions().disable();
        http
                .formLogin().defaultSuccessUrl("/", true).loginPage("/login").permitAll()
                .and().authorizeRequests().antMatchers("/register", "/password", "/js/**", "/css/**", "/images/**", "/img/**", "/fengkongweishi/**", "/fengkongweishi/images/**",
                "/libs/**", "/*.txt", "/*.html", "/callback/**", "/report/**", "/verification/codeandimage", "/login/mobile",
                "/company/register", "/user/register", "/company/registerSms", "/user/registerSms", "/user/rePasswordSms", "/user/rePassword").permitAll()
                .and().authorizeRequests().anyRequest().authenticated()   //拦截
                .and().rememberMe().tokenValiditySeconds(60 * 60 * 24 * 30)
                //检测超时，注入sessionRegistry
                .and().sessionManagement().invalidSessionUrl("/login").maximumSessions(1).expiredUrl("/login").sessionRegistry(sessionRegistry())
                .and()
                .and().logout().permitAll();
    }


    @Bean
    UserDetailsService customUserService() {
        return new UserService();
    }

    @Bean
    public SessionRegistry sessionRegistry(){
        return new SessionRegistryImpl();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(customUserService()).passwordEncoder(new PasswordEncoder() {
            @Override
            public String encode(CharSequence rawPassword) {
                return MD5Util.encode((String) rawPassword);
            }

            @Override
            public boolean matches(CharSequence rawPassword, String encodedPassword) {
                return encodedPassword.equals(MD5Util.encode((String) rawPassword));
            }
        });
    }

    @Bean
    public MobileAuthenticationFilter authenticationFilter() {
        MobileAuthenticationFilter authenticationFilter = new MobileAuthenticationFilter();
        authenticationFilter.setAuthenticationManager(authentication -> authentication);
        return authenticationFilter;
    }

}
